{"version":3,"sources":["Todos.js","App.js","serviceWorker.js","index.js"],"names":["Todos","useState","text","isCompleted","todos","setTodos","completeTodo","index","newTodos","deleteTodo","splice","className","map","todo","Todo","key","TodoForm","addTodo","newTodo","style","textDecoration","onClick","value","setValue","onSubmit","e","preventDefault","teype","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAGO,SAASA,IAAS,IAAD,EACIC,mBAAS,CACjC,CACEC,KAAM,oBACNC,aAAa,GAEf,CACED,KAAM,wBACNC,aAAa,GAEf,CACED,KAAM,6BACNC,aAAa,KAZK,mBACfC,EADe,KACRC,EADQ,KAyBhBC,EAAe,SAAAC,GACnB,IAAMC,EAAQ,YAAOJ,GACrBI,EAASD,GAAOJ,aAAeK,EAASD,GAAOJ,YAC/CE,EAASG,IAGLC,EAAa,SAAAF,GACjB,IAAMC,EAAQ,YAAOJ,GACrBI,EAASE,OAAOH,EAAO,GACvBF,EAASG,IAGX,OACE,yBAAKG,UAAU,aACZP,EAAMQ,KAAI,SAACC,EAAMN,GAAP,OACT,kBAACO,EAAD,CACEC,IAAKR,EACLA,MAAOA,EACPM,KAAMA,EACNP,aAAcA,EACdG,WAAYA,OAGhB,kBAACO,EAAD,CAAUC,QAhCE,SAAAf,GACd,IAAMgB,EAAU,CACdhB,KAAMA,EACNC,aAAa,GAETK,EAAQ,sBAAOJ,GAAP,CAAcc,IAC5Bb,EAASG,OA+Bb,SAASM,EAAT,GAA0D,IAA1CD,EAAyC,EAAzCA,KAAMN,EAAmC,EAAnCA,MAAOD,EAA4B,EAA5BA,aAAcG,EAAc,EAAdA,WACzC,OACE,yBACEU,MAAO,CAAEC,eAAgBP,EAAKV,YAAc,eAAiB,IAC7DQ,UAAU,QAETE,EAAKX,KACN,6BACE,4BACEmB,QAAS,WACPf,EAAaC,KAFjB,YAOA,4BACEc,QAAS,WACPZ,EAAWF,KAFf,OAYR,SAASS,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QAAW,EACHhB,mBAAS,IADN,mBACtBqB,EADsB,KACfC,EADe,KAQ7B,OACE,0BAAMC,SAPa,SAAAC,GACnBA,EAAEC,iBACGJ,IACLL,EAAQK,GACRC,EAAS,OAIP,2BACEI,MAAM,OACNhB,UAAU,QACVW,MAAOA,EACPM,YAAY,cACZC,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,WCrF1BS,MATf,WACE,OACE,yBAAKpB,UAAU,OACb,4BAAQA,UAAU,cAAlB,SACA,kBAACX,EAAD,QCIcgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fa6a14c0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nexport function Todos() {\n  const [todos, setTodos] = useState([\n    {\n      text: \"Learn about React\",\n      isCompleted: false\n    },\n    {\n      text: \"Meet friend for lunch\",\n      isCompleted: false\n    },\n    {\n      text: \"Build really cool todo app\",\n      isCompleted: false\n    }\n  ]);\n\n  const addTodo = text => {\n    const newTodo = {\n      text: text,\n      isCompleted: false\n    };\n    const newTodos = [...todos, newTodo];\n    setTodos(newTodos);\n  };\n\n  const completeTodo = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    setTodos(newTodos);\n  };\n\n  const deleteTodo = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"todo-list\">\n      {todos.map((todo, index) => (\n        <Todo\n          key={index}\n          index={index}\n          todo={todo}\n          completeTodo={completeTodo}\n          deleteTodo={deleteTodo}\n        />\n      ))}\n      <TodoForm addTodo={addTodo} />\n    </div>\n  );\n}\n\nfunction Todo({ todo, index, completeTodo, deleteTodo }) {\n  return (\n    <div\n      style={{ textDecoration: todo.isCompleted ? \"line-through\" : \"\" }}\n      className=\"todo\"\n    >\n      {todo.text}\n      <div>\n        <button\n          onClick={() => {\n            completeTodo(index);\n          }}\n        >\n          Complete\n        </button>\n        <button\n          onClick={() => {\n            deleteTodo(index);\n          }}\n        >\n          X\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        teype=\"text\"\n        className=\"input\"\n        value={value}\n        placeholder=\"Add todo...\"\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  );\n}\n\nexport default Todos;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Todos } from \"./Todos\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Hooks</header>\n      <Todos />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}